{
  "title": {
    "name": "tinput",
    "caption": "'tinput' component library documentation"
  },
  "components": {
    "Readme": {
      "displayName": "Readme"
    },
    "TText": {
      "description": "Component representing single line text editor",
      "displayName": "TText",
      "methods": [],
      "example": {
        "name": "TTextExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "string",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "format": {
          "type": "shape",
          "description": "Text format. If specified entered text is checked with \"format.mask\" value:",
          "required": false,
          "structure": {
            "mask": {
              "type": "string",
              "description": "Text mask. \"N\" represents any number and \"A\" - any symbol"
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            }
          }
        },
        "regexp": {
          "type": "object",
          "description": "Regular expression to validate entered text",
          "required": false
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Entered text."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "On text validate event. Fires if text validation is needed. Must return \"true\" if text is valid or \"false\" in other cases ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Text to validate"
            }
          },
          "required": false
        },
        "onMask": {
          "type": "func",
          "description": "",
          "required": false
        }
      }
    },
    "TMask": {
      "description": "Component representing single line text editor with masked input. All functionality of masked input\r\nrealized in \"TText\" component. \"TMask\" represented only for compatibility reasons with previous versions",
      "displayName": "TMask",
      "methods": [],
      "example": {
        "name": "TMaskExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "string",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "format": {
          "type": "shape",
          "description": "Text format. If specified entered text is checked with \"format.mask\" value:",
          "required": true,
          "structure": {
            "mask": {
              "type": "string",
              "description": "Text mask. \"N\" represents any number and \"A\" - any symbol"
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            }
          }
        },
        "regexp": {
          "type": "object",
          "description": "Regular expression to validate entered text",
          "required": false
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Entered text."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "On text validate event. Fires if text validation is needed. Must return \"true\" if text is valid or \"false\" in other cases ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Text to validate"
            }
          },
          "required": false
        }
      }
    },
    "TMail": {
      "description": "Component representing editor for email input. \"TMail\" is a special case of \"TText\" component designed\r\nfor mail input",
      "displayName": "TMail",
      "methods": [],
      "example": {
        "name": "TMailExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "string",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Entered text."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TMemo": {
      "description": "Component representing multiline editor",
      "displayName": "TMemo",
      "methods": [
        {
          "name": "handleIcon",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "example": {
        "name": "TMemoExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "string",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "wrap": {
          "type": "any",
          "description": "If \"true\" editor preserves end of line characters in text and allows to wrap text when Enter key is pressed.\r\nOtherwise (by default) it ignores new line characters and entered text treated as single string",
          "required": false,
          "defaultValue": "false"
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Entered text."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TListBox": {
      "description": "Represents list box",
      "displayName": "TListBox",
      "methods": [],
      "example": {
        "name": "TListBoxExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "list": {
              "type": "shape",
              "description": "Style for dropdown list. Contains fields:",
              "structure": {
                "container": {
                  "type": "object",
                  "description": "Style for dropdown list container"
                },
                "item": {
                  "type": "object",
                  "description": "Style for list items"
                },
                "selected": {
                  "type": "object",
                  "description": "Style for selected list item"
                }
              }
            }
          }
        },
        "value": {
          "type": "any",
          "description": "Component initial value. Contains \"key\" value of default list item",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "empty": {
          "type": "shape",
          "description": "Empty item",
          "required": false,
          "structure": {
            "key": {
              "type": "any",
              "description": "Empty item key"
            },
            "value": {
              "type": "string",
              "description": "Empty item value"
            }
          }
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input",
          "required": false
        },
        "showIcon": {
          "type": "any",
          "description": "If \"true\" drop up/down indicator is shown",
          "required": false,
          "defaultValue": "true"
        },
        "items": {
          "type": "arrayOf",
          "description": "List of dropdown items",
          "required": false,
          "structure": {
            "key": {
              "type": "any",
              "description": "Item key field"
            },
            "value": {
              "type": "string",
              "description": "Item name"
            }
          }
        },
        "listMode": {
          "type": "string",
          "description": "Determines what part of \"item\" should be shown in dropdown list",
          "required": false,
          "defaultValue": "'value'"
        },
        "showMode": {
          "type": "string",
          "description": "Determines what part of \"item\" should be shown in editor",
          "required": false,
          "defaultValue": "'value'"
        },
        "clickable": {
          "type": "string",
          "description": "Determines what components reacts on \"onClick\" events",
          "required": false,
          "defaultValue": "'label edit'"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Selected item \"key\" value"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "On text validate event. Fires if text validation is needed. Must return \"true\" if text is valid or \"false\" in other cases ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Text to validate"
            }
          },
          "required": false
        }
      }
    },
    "TSearch": {
      "description": "",
      "displayName": "TSearch",
      "methods": [
        {
          "name": "search",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            },
            {
              "name": "callback",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TSearchExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "list": {
              "type": "shape",
              "description": "Style for dropdown list. Contains fields:",
              "structure": {
                "container": {
                  "type": "object",
                  "description": "Style for dropdown list container"
                },
                "item": {
                  "type": "object",
                  "description": "Style for list items"
                },
                "selected": {
                  "type": "object",
                  "description": "Style for selected list item"
                }
              }
            }
          }
        },
        "value": {
          "type": "any",
          "description": "Component initial value. Contains \"key\" value of default list item",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "empty": {
          "type": "shape",
          "description": "Empty item",
          "required": false,
          "structure": {
            "key": {
              "type": "any",
              "description": "Empty item key"
            },
            "value": {
              "type": "string",
              "description": "Empty item value"
            }
          }
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input",
          "required": false
        },
        "showIcon": {
          "type": "any",
          "description": "If \"true\" drop up/down indicator is shown",
          "required": false,
          "defaultValue": "true"
        },
        "chars": {
          "type": "number",
          "description": "Minimal number of characters entered in editor required for \"onSearch\" event to be called",
          "required": false,
          "defaultValue": "3"
        },
        "listMode": {
          "type": "string",
          "description": "Determines what part of \"item\" should be shown in dropdown list",
          "required": false,
          "defaultValue": "'value'"
        },
        "showMode": {
          "type": "string",
          "description": "Determines what part of \"item\" should be shown in editor",
          "required": false,
          "defaultValue": "'value'"
        },
        "clickable": {
          "type": "string",
          "description": "Determines what components reacts on \"onClick\" events",
          "required": false,
          "defaultValue": "'label edit'"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Selected item \"key\" value"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "On text validate event. Component calls \"onValidate\" event when text validation is needed. Must return \"true\" if text is valid or \"false\" in other cases ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Text to validate"
            }
          },
          "required": false
        },
        "onSearch": {
          "type": "func",
          "description": "On search event. Component calls \"onSearch\" event whenever component text is changed and count of characters entered more than value determined by \"chars\" property. User defined \"onSearch\" event must call \"callback\" function with array of items like \"[{key: ..., value: ...}, ...]\" as parameter ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Component text. Component fills \"event.value\" with editor text when text is changed and calls \"onSearch\" event"
            },
            "event.key": {
              "name": "event.key",
              "type": "string",
              "description": "Component fills \"event.key\" with current item key value and calls \"onSearch\" event when search by key is needed. For example when \"value\" component property is assigned"
            },
            "callback": {
              "name": "callback",
              "type": "string",
              "description": "Callback function. Call \"callback\" to return items list back to component in form of \"[{key: ..., value: ...}, ...]\" as function argument"
            }
          },
          "required": false
        }
      }
    },
    "TButton": {
      "description": "Clickable button with text caption",
      "displayName": "TButton",
      "methods": [
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleDown",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleUp",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "example": {
        "name": "TButtonExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "wait": {
              "type": "object",
              "description": "Style for waiting button state"
            },
            "down": {
              "type": "object",
              "description": "Style for pressed button state"
            }
          }
        },
        "name": {
          "type": "any",
          "description": "Component name",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Component data",
          "required": false
        },
        "wait": {
          "type": "any",
          "description": "Component wait state. When \"true\" component appears in grey color and doesn't respond\r\non \"onClick\" event",
          "required": false,
          "defaultValue": "false"
        },
        "down": {
          "type": "any",
          "description": "If \"true\" button preserves pressed state",
          "required": false,
          "defaultValue": "false"
        },
        "onClick": {
          "type": "func",
          "description": "On click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            }
          },
          "required": false
        }
      }
    },
    "TIcon": {
      "description": "Clickable icon",
      "displayName": "TIcon",
      "methods": [],
      "example": {
        "name": "TIconExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Component name",
          "required": true
        },
        "data": {
          "type": "any",
          "description": "Component data",
          "required": false
        },
        "onClick": {
          "type": "func",
          "description": "On click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            }
          },
          "required": false
        }
      }
    },
    "TDate": {
      "description": "Date editor with masked input and date value validation",
      "displayName": "TDate",
      "methods": [
        {
          "name": "handleValidate",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TDateExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "union",
          "description": "Component initial value. Can be one of:",
          "required": false,
          "structure": {
            "string": {
              "description": "Date in \"iso\" format (\"YYYY-MM-DD\")"
            },
            "Date": {
              "description": "Native JavaScript Date"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "format": {
          "type": "shape",
          "description": "Date format:",
          "required": false,
          "defaultValue": "{mask: 'DD.MM.YYYY', empty: '_', full: true, type: 'iso'}",
          "structure": {
            "mask": {
              "type": "string",
              "description": "Date mask. Default is \"DD.MM.YYYY\""
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            },
            "type": {
              "type": "enum of ['iso', 'native']",
              "description": "Date format appeared in onChange event. Default is \"iso\" (\"YYYY-MM-DD\")"
            }
          }
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event then date is not completely entered or invalid. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On date change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "any",
              "description": "Component date value. Date value format is determined by \"format.type\" property."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TTime": {
      "description": "Time editor with time value validation",
      "displayName": "TTime",
      "methods": [
        {
          "name": "handleValidate",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TTimeExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "union",
          "description": "Component initial value. Can be one of:",
          "required": false,
          "structure": {
            "string": {
              "description": "Time in \"iso\" format (\"hh:mm:ss\")"
            },
            "Date": {
              "description": "Native JavaScript Date"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "format": {
          "type": "shape",
          "description": "Time format:",
          "required": false,
          "defaultValue": "{mask: 'hh:mm', empty: '_', full: true, type: 'iso'}",
          "structure": {
            "mask": {
              "type": "string",
              "description": "Date mask. Default is \"hh:mm\""
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            },
            "type": {
              "type": "enum of ['iso', 'native']",
              "description": "Time format appeared in onChange event. Default is \"iso\" (\"hh:mm:ss\")"
            }
          }
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event then date is not completely entered or invalid. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered time is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On date change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "any",
              "description": "Component date value. Time value format is determined by \"format.type\" property."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TCheck": {
      "description": "Represents checkbox with label",
      "displayName": "TCheck",
      "methods": [
        {
          "name": "handleIcon",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "updateChecked",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "value",
              "type": null
            },
            {
              "name": "change",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "isRight",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "example": {
        "name": "TCheckExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            }
          }
        },
        "value": {
          "type": "any",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "any",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "checked": {
          "type": "any",
          "description": "Checked state value",
          "required": false,
          "defaultValue": "true"
        },
        "unchecked": {
          "type": "any",
          "description": "Unchecked state value",
          "required": false,
          "defaultValue": "false"
        },
        "radio": {
          "type": "any",
          "description": "Shows component icons as radio buttons",
          "required": false,
          "defaultValue": "false"
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards icon. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'left'": {},
            "'right'": {}
          }
        },
        "onChange": {
          "type": "func",
          "description": "On click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "object",
              "description": "component value. If component state is checked then \"value\" equals to \"checked\" property. Otherwise it equals to \"unchecked\" property"
            }
          },
          "required": false
        }
      }
    },
    "TGroup": {
      "description": "Groups components in a single block",
      "displayName": "TGroup",
      "methods": [],
      "example": {
        "name": "TGroupExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "content": {
              "type": "object",
              "description": "Style for group content. By default content is a \"flex box\" so it is possible to use\r\n\"flex\" styles without specifying \"display: 'flex'\" in \"content\" section"
            }
          }
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        }
      }
    },
    "TItemGroup": {
      "description": "Groups items in a single block. Items represented as buttons? radio buttons or\r\ncheck boxes depending on \"control\" property",
      "displayName": "TItemGroup",
      "methods": [
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TItemGroupExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "content": {
              "type": "object",
              "description": "Style for group content. By default content is a \"flex box\" so it is possible to use\r\n\"flex\" styles without specifying \"display: 'flex'\" in \"content\" section"
            },
            "control": {
              "type": "object",
              "description": "Item control style"
            }
          }
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "grouped": {
          "type": "any",
          "description": "If true only one button in group may have down state",
          "required": false,
          "defaultValue": "true"
        },
        "indexes": {
          "type": "arrayOf",
          "description": "List of indexes of controls in \"down/checked\" state",
          "required": false,
          "defaultValue": "[]",
          "structure": {
            "name": {}
          }
        },
        "items": {
          "type": "arrayOf",
          "description": "Button list. It is possible to use another names instead of \"key\", \"value\" and \"group\". In that case\r\nkey, value and group will be first, second and third items respectively",
          "required": false,
          "structure": {
            "key": {
              "type": "any",
              "description": "Item key. May have any value and used as a control \"name\""
            },
            "value": {
              "type": "any",
              "description": "Control label/caption"
            },
            "group": {
              "type": "number",
              "description": "Control group. If \"grouped = true\" then only one control in the same group can be in checked/down state"
            }
          }
        },
        "control": {
          "type": "enum",
          "description": "Control type used in group. Can be one of:",
          "required": false,
          "defaultValue": "'button'",
          "structure": {
            "'button'": {},
            "'check'": {},
            "'radio'": {}
          }
        },
        "checked": {
          "type": "any",
          "description": "Checked/Down value",
          "required": false,
          "defaultValue": "true"
        },
        "unchecked": {
          "type": "any",
          "description": "Unchecked/Up value",
          "required": false,
          "defaultValue": "false"
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards icon (for control equals to \"check\" or \"radio\")",
          "required": false,
          "structure": {
            "'left'": {},
            "'right'": {}
          }
        },
        "onChange": {
          "type": "func",
          "description": "On click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.control": {
              "name": "event.control",
              "type": "string",
              "description": "Pressed/Checked control name"
            },
            "event.value": {
              "name": "event.value",
              "type": "number",
              "description": "Pressed control down/checked state"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Pressed item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "object",
              "description": "Pressed item"
            },
            "event.indexes": {
              "name": "event.indexes",
              "type": "array",
              "description": "Array of item indexes in \"down/checked\" state"
            },
            "event.items": {
              "name": "event.items",
              "type": "array",
              "description": "Array of items in \"down/checked\" state"
            }
          },
          "required": false
        }
      }
    },
    "TPanel": {
      "description": "Groups components in a single block",
      "displayName": "TPanel",
      "methods": [],
      "example": {
        "name": "TPanelExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            }
          }
        },
        "dir": {
          "type": "string",
          "description": "",
          "required": false
        },
        "align": {
          "type": "string",
          "description": "",
          "required": false
        }
      }
    },
    "TScroll": {
      "description": "Component represents scroll box",
      "displayName": "TScroll",
      "methods": [
        {
          "name": "getHeight",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "updateStyle",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "resize",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "example": {
        "name": "TScrollExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container. If \"container\" does not contain \"height\" field (by default)\r\n\"TScroll\" fills all remaining space up to the bottom of screen"
            },
            "content": {
              "type": "object",
              "description": "Style for scroll content"
            }
          }
        },
        "margin": {
          "type": "number",
          "description": "",
          "required": false,
          "defaultValue": "4"
        },
        "scrollBars": {
          "type": "enum",
          "description": "Scroll bars to show. Can be one of:",
          "required": false,
          "defaultValue": "'both'",
          "structure": {
            "'both'": {},
            "'horizontal'": {},
            "'vertical'": {},
            "'none'": {}
          }
        },
        "overflow": {
          "type": "enum",
          "description": "Overflow attribute. Can be one of:",
          "required": false,
          "defaultValue": "'auto'",
          "structure": {
            "'auto'": {},
            "'scroll'": {},
            "'hidden'": {},
            "'visible'": {}
          }
        }
      }
    },
    "TTop": {
      "description": "Component represents top menu",
      "displayName": "TTop",
      "methods": [
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "iconClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TTopExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "button": {
              "type": "object",
              "description": "Style for main menu button"
            },
            "caption": {
              "type": "object",
              "description": "Style for caption"
            },
            "tools": {
              "type": "object",
              "description": "Style for tool box appeared in right corner of component"
            },
            "icon": {
              "type": "object",
              "description": "Style for all tool icons. In addition one can specify custom icon style by icon name"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Name of the main menu icon appeared in the left corner of component",
          "required": false,
          "defaultValue": "'menu'"
        },
        "caption": {
          "type": "any",
          "description": "Component caption",
          "required": false
        },
        "tools": {
          "type": "arrayOf",
          "description": "Array of component tools",
          "required": false,
          "structure": {
            "icon": {
              "type": "string",
              "description": "Tool icon name to show"
            },
            "onClick": {
              "type": "func",
              "description": "Tool icon click event"
            },
            "style": {
              "type": "object",
              "description": "Tool icon custom style"
            }
          }
        },
        "onClick": {
          "type": "func",
          "description": "On click event. Fires when main menu button or tools icon are clicked ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TSide": {
      "description": "Represents left sided slide menu",
      "displayName": "TSide",
      "methods": [
        {
          "name": "handleClose",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleMove",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleStart",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleEnd",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleEndS",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleBlur",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "calcState",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "doClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "index",
              "type": null
            },
            {
              "name": "item",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TSideExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "close": {
              "type": "object",
              "description": "Style for close button"
            },
            "content": {
              "type": "object",
              "description": "Style for menu content"
            },
            "current": {
              "type": "object",
              "description": "Style for current menu item"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "items": {
          "type": "arrayOf",
          "description": "List menu items",
          "required": false,
          "structure": {
            "name": {
              "type": "string",
              "description": "Item name"
            },
            "caption": {
              "type": "any",
              "description": "Item caption"
            },
            "style": {
              "type": "object",
              "description": "Item custom style. In addition one can specify custom item style by use of item name in \"style\" property"
            }
          }
        },
        "item": {
          "type": "string",
          "description": "Current menu item",
          "required": false
        },
        "show": {
          "type": "any",
          "description": "Indicates weather to show or close menu",
          "required": false
        },
        "width": {
          "type": "string",
          "description": "Menu default width",
          "required": false,
          "defaultValue": "\"300px\""
        },
        "touchWidth": {
          "type": "number",
          "description": "The minimum touch move length in pixels required for menu to show/hide",
          "required": false,
          "defaultValue": "50"
        },
        "initWidth": {
          "type": "number",
          "description": "Left side area width in which component listens touch events when menu is closed",
          "required": false,
          "defaultValue": "16"
        },
        "onClick": {
          "type": "func",
          "description": "On click event. Fires when main menu button or tools icon are clicked ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Clicked menu index"
            },
            "event.item": {
              "name": "event.item",
              "type": "object",
              "description": "Clicked menu item"
            }
          },
          "required": false
        }
      }
    },
    "TGrid": {
      "description": "Represents data grid designed on CSS Grid layout. Some browsers experience performance\r\nissues while rendering large amount of cells in CSS Grids. In that case we recommend\r\nto use TTable component instead of TGrid",
      "displayName": "TGrid",
      "methods": [
        {
          "name": "adjust",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleRender",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TGridExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "title": {
              "type": "object",
              "description": "Style for component title"
            },
            "caption": {
              "type": "object",
              "description": "Style for grid header cells"
            },
            "cell": {
              "type": "object",
              "description": "Style for grid body rows"
            },
            "selected": {
              "type": "object",
              "description": "Style for selected row"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "columns": {
          "type": "shape",
          "description": "Grid columns description. An object containing set of fields representing column names with parameters\r\n\"caption\", \"width\" and \"style\":",
          "required": false,
          "structure": {
            "columnName": {
              "type": "shape",
              "structure": {
                "caption": {
                  "type": "any",
                  "description": "Column caption"
                },
                "width": {
                  "type": "string",
                  "description": "Column width"
                },
                "style": {
                  "type": "object",
                  "description": "Column style (optional)"
                }
              }
            }
          }
        },
        "items": {
          "type": "arrayOf",
          "description": "Grid cell data. Each element of array contains name/value pairs where names coincide with column names\r\ndescribed in \"columns\" property",
          "required": false,
          "structure": {
            "name": {}
          }
        },
        "index": {
          "type": "number",
          "description": "Selected row index",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Timeout between user clicks row and \"onChange\" event in milliseconds",
          "required": false,
          "defaultValue": "1000"
        },
        "options": {
          "type": "shape",
          "description": "Grid options",
          "required": false,
          "defaultValue": "{\r\n    scrollHead: false,\r\n    showSelected: true,\r\n    showHead: true,\r\n    borderWidth: 1\r\n}",
          "structure": {
            "scrollHead": {
              "type": "any",
              "description": "If \"true\" then head is scrollable"
            },
            "showSelected": {
              "type": "any",
              "description": "If \"true\" then selected row is shown using \"selected\" style"
            },
            "showHead": {
              "type": "any",
              "description": "Indicates whether to show grid head or not"
            },
            "borderWidth": {
              "type": "union",
              "description": "Border width in pixels"
            }
          }
        },
        "onRowStyle": {
          "type": "func",
          "description": "Happens when row style is needed. Returns object containing row style ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with the following structure"
            },
            "event.cell": {
              "name": "event.cell",
              "type": "any",
              "description": "Current cell content"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Current row index"
            },
            "event.row": {
              "name": "event.row",
              "type": "object",
              "description": "Current row in form of name/value pairs where names coincide with column names described in \"columns\" property"
            },
            "event.style": {
              "name": "event.style",
              "type": "object",
              "description": "Current component style from \"props.style\" property"
            }
          },
          "required": false
        },
        "onCellStyle": {
          "type": "func",
          "description": "Happens when cell style is needed. Returns object containing cell style ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with the following structure"
            },
            "event.cell": {
              "name": "event.cell",
              "type": "any",
              "description": "Current cell content"
            },
            "event.column": {
              "name": "event.column",
              "type": "string",
              "description": "Current column name"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Current row index"
            },
            "event.row": {
              "name": "event.row",
              "type": "object",
              "description": "Current row in form of name/value pairs where names coincide with column names described in \"columns\" property"
            },
            "event.style": {
              "name": "event.style",
              "type": "object",
              "description": "Current component style from \"props.style\" property"
            }
          },
          "required": false
        },
        "onClick": {
          "type": "func",
          "description": "Happens when user clicks on row ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onChange": {
          "type": "func",
          "description": "Happens when selected row index is changed or new items set loaded in grid ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        }
      }
    },
    "TTable": {
      "description": "Represents data table. TTable is similar to TGrid component but designed using \"table\" layout.\r\nIn case of large amount of data items TTable demonstrates better performance than TGrid",
      "displayName": "TTable",
      "methods": [
        {
          "name": "adjust",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleRender",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TTableExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "title": {
              "type": "object",
              "description": "Style for component title"
            },
            "caption": {
              "type": "object",
              "description": "Style for grid header cells"
            },
            "cell": {
              "type": "object",
              "description": "Style for grid body rows"
            },
            "selected": {
              "type": "object",
              "description": "Style for selected row"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "columns": {
          "type": "shape",
          "description": "Grid columns description. An object containing set of fields representing column names with parameters\r\n\"caption\", \"width\" and \"style\":",
          "required": false,
          "structure": {
            "columnName": {
              "type": "shape",
              "structure": {
                "caption": {
                  "type": "any",
                  "description": "Column caption"
                },
                "width": {
                  "type": "string",
                  "description": "Column width"
                },
                "style": {
                  "type": "object",
                  "description": "Column style (optional)"
                }
              }
            }
          }
        },
        "items": {
          "type": "arrayOf",
          "description": "Grid cell data. Each element of array contains name/value pairs where names coincide with column names\r\ndescribed in \"columns\" property",
          "required": false,
          "structure": {
            "name": {}
          }
        },
        "index": {
          "type": "number",
          "description": "Selected row index",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Timeout between user clicks row and \"onChange\" event in milliseconds",
          "required": false,
          "defaultValue": "1000"
        },
        "options": {
          "type": "shape",
          "description": "Grid options",
          "required": false,
          "defaultValue": "{\r\n    scrollHead: false,\r\n    showSelected: true,\r\n    showHead: true,\r\n    borderWidth: 1\r\n}",
          "structure": {
            "scrollHead": {
              "type": "any",
              "description": "If \"true\" then head is scrollable"
            },
            "showSelected": {
              "type": "any",
              "description": "If \"true\" then selected row is shown using \"selected\" style"
            },
            "showHead": {
              "type": "any",
              "description": "Indicates whether to show grid head or not"
            },
            "borderWidth": {
              "type": "union",
              "description": "Border width in pixels"
            }
          }
        },
        "onRowStyle": {
          "type": "func",
          "description": "Happens when row style is needed. Returns object containing row style ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with the following structure"
            },
            "event.cell": {
              "name": "event.cell",
              "type": "any",
              "description": "Current cell content"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Current row index"
            },
            "event.row": {
              "name": "event.row",
              "type": "object",
              "description": "Current row in form of name/value pairs where names coincide with column names described in \"columns\" property"
            },
            "event.style": {
              "name": "event.style",
              "type": "object",
              "description": "Current component style from \"props.style\" property"
            }
          },
          "required": false
        },
        "onCellStyle": {
          "type": "func",
          "description": "Happens when cell style is needed. Returns object containing cell style ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with the following structure"
            },
            "event.cell": {
              "name": "event.cell",
              "type": "any",
              "description": "Current cell content"
            },
            "event.column": {
              "name": "event.column",
              "type": "string",
              "description": "Current column name"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Current row index"
            },
            "event.row": {
              "name": "event.row",
              "type": "object",
              "description": "Current row in form of name/value pairs where names coincide with column names described in \"columns\" property"
            },
            "event.style": {
              "name": "event.style",
              "type": "object",
              "description": "Current component style from \"props.style\" property"
            }
          },
          "required": false
        },
        "onClick": {
          "type": "func",
          "description": "Happens when user clicks on row ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onChange": {
          "type": "func",
          "description": "Happens when selected row index is changed or new items set loaded in grid ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        }
      }
    },
    "TRibbon": {
      "description": "Shows list items in form of ribbon",
      "displayName": "TRibbon",
      "methods": [
        {
          "name": "handleRender",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TRibbonExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "title": {
              "type": "object",
              "description": "Style for title component block"
            },
            "content": {
              "type": "object",
              "description": "Style for component content"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "items": {
          "type": "arrayOf",
          "description": "Grid cell data. Each element of array contains name/value pairs where names coincide with column names\r\ndescribed in \"columns\" property",
          "required": false,
          "structure": {
            "name": {}
          }
        },
        "index": {
          "type": "number",
          "description": "Selected row index",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Timeout between user clicks row and \"onChange\" event in milliseconds",
          "required": false,
          "defaultValue": "500"
        },
        "onClick": {
          "type": "func",
          "description": "Happens when user clicks on row ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onChange": {
          "type": "func",
          "description": "Happens when selected row index is changed or new items set loaded in grid ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onFrame": {
          "type": "func",
          "description": "Happens when frame generation is needed. Mast return html element representing current item ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.item": {
              "name": "event.item",
              "type": "object",
              "description": "Current row"
            },
            "event.index": {
              "name": "event.index",
              "type": "number",
              "description": "Current row item"
            },
            "event.style": {
              "name": "event.style",
              "type": "object",
              "description": "Component style"
            },
            "event.onClick": {
              "name": "event.onClick",
              "type": "func",
              "description": "Reference to \"onClick\" event"
            }
          },
          "required": false
        }
      }
    },
    "TPager": {
      "description": "Splits up grid item list to pages and shows page navigation bar",
      "displayName": "TPager",
      "methods": [
        {
          "name": "change",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TPagerExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label showing items count"
            },
            "edit": {
              "type": "object",
              "description": "Style for page navigation bar"
            },
            "page": {
              "type": "object",
              "description": "Style page buttons"
            },
            "current": {
              "type": "object",
              "description": "Style for current page button"
            },
            "wait": {
              "type": "object",
              "description": "Style for waiting state of current page button"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "size": {
          "type": "number",
          "description": "Maximum items count per page",
          "required": false,
          "defaultValue": "100"
        },
        "items": {
          "type": "array",
          "description": "Initial items list",
          "required": false
        },
        "hide": {
          "type": "any",
          "description": "Automatically hide label and navigator when items count less than \"size\"",
          "required": false,
          "defaultValue": "false"
        },
        "timeout": {
          "type": "number",
          "description": "Delay between page button is clicked and \"onChange\" event",
          "required": false,
          "defaultValue": "1000"
        },
        "onChange": {
          "type": "func",
          "description": "Happens when result item list is generated ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.items": {
              "name": "event.items",
              "type": "object",
              "description": "Generated item list"
            },
            "event.size": {
              "name": "event.size",
              "type": "number",
              "description": "Current page size"
            },
            "event.length": {
              "name": "event.length",
              "type": "number",
              "description": "Current page length"
            },
            "event.page": {
              "name": "event.page",
              "type": "number",
              "description": "Current page index"
            },
            "event.pageFrom": {
              "name": "event.pageFrom",
              "type": "number",
              "description": "First page index"
            },
            "event.pageTo": {
              "name": "event.pageTo",
              "type": "number",
              "description": "Last page index"
            },
            "event.from": {
              "name": "event.from",
              "type": "number",
              "description": "First item index on current page"
            },
            "event.to": {
              "name": "event.to",
              "type": "number",
              "description": "Last item index on current page"
            },
            "event.first": {
              "name": "event.first",
              "type": "number",
              "description": "First item index"
            },
            "event.last": {
              "name": "event.last",
              "type": "number",
              "description": "Last item index"
            }
          },
          "required": false
        }
      }
    },
    "TModal": {
      "description": "Shows modal dialog",
      "displayName": "TModal",
      "methods": [
        {
          "name": "setStyle",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "style",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "setShow",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "close",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "setTimer",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "stopTimer",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleCancel",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleKeyDown",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TModalExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "content": {
              "type": "object",
              "description": "Style for modal content. By default content is a flex box with column justify mode"
            },
            "header": {
              "type": "object",
              "description": "Style for header box. Header is a flex box containing \"timer\", \"caption\" and \"close\" elements"
            },
            "timer": {
              "type": "object",
              "description": "Style for timer box"
            },
            "caption": {
              "type": "object",
              "description": "Style for caption box"
            },
            "close": {
              "type": "object",
              "description": "Style for close icon"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "show": {
          "type": "any",
          "description": "Indicates whether to show dialog or not",
          "required": false
        },
        "countdown": {
          "type": "any",
          "description": "Contain number of seconds before dialog automatically closes",
          "required": false
        },
        "caption": {
          "type": "string",
          "description": "Caption content",
          "required": false
        },
        "showHeader": {
          "type": "any",
          "description": "Indicates whether to show header or not",
          "required": false,
          "defaultValue": "true"
        },
        "escape": {
          "type": "any",
          "description": "Indicates whether to close dialog when \"Escape\" key is pressed",
          "required": false,
          "defaultValue": "false"
        },
        "transition": {
          "type": "number",
          "description": "Transition time in milliseconds",
          "required": false,
          "defaultValue": "250"
        },
        "onClose": {
          "type": "func",
          "description": "On dialog close event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.button": {
              "name": "event.button",
              "type": "string",
              "description": "Clicked button name"
            }
          },
          "required": true
        }
      }
    },
    "TForm": {
      "description": "Extends TModal component. Adds buttons panel at the bottom and on button click events. In addition TForm has\r\n\"message\" and \"error\" props. If \"message\" or \"error\" assigned then they are shown in content area with \"OK\" button",
      "displayName": "TForm",
      "methods": [
        {
          "name": "handleButtonClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleCancel",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TFormExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "content": {
              "type": "object",
              "description": "Style for modal content. By default content is a flex box with column justify mode"
            },
            "header": {
              "type": "object",
              "description": "Style for header box. Header is a flex box containing \"timer\", \"caption\" and \"close\" elements"
            },
            "timer": {
              "type": "object",
              "description": "Style for timer box"
            },
            "caption": {
              "type": "object",
              "description": "Style for caption box"
            },
            "close": {
              "type": "object",
              "description": "Style for close icon"
            },
            "footer": {
              "type": "object",
              "description": "Style for footer box (buttons container)"
            },
            "error": {
              "type": "object",
              "description": "Style for error text"
            },
            "message": {
              "type": "object",
              "description": "Style for message text"
            },
            "button": {
              "type": "object",
              "description": "Style for all buttons in footer area"
            },
            "buttonName": {
              "type": "object",
              "description": "Style for button. Replace \"buttonName\" with your button name. There are predefined styles for\r\n\"ok\", \"close\", \"cancel\", \"add\", \"delete\", \"submit\", \"wait\", \"open\" and \"save\" buttons"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "show": {
          "type": "any",
          "description": "Indicates whether to show dialog or not",
          "required": false
        },
        "countdown": {
          "type": "any",
          "description": "Contain number of seconds before dialog automatically closes",
          "required": false
        },
        "caption": {
          "type": "string",
          "description": "Caption content",
          "required": false
        },
        "showHeader": {
          "type": "any",
          "description": "Indicates whether to show header or not",
          "required": false,
          "defaultValue": "true"
        },
        "wait": {
          "type": "any",
          "description": "If \"true\" tells TForm to leave button greyscale and don't react on \"onClick\" events",
          "required": false
        },
        "buttons": {
          "type": "object",
          "description": "List of buttons to show in footer area. Represents object of the following structure\r\n\"{buttonName: 'Button caption', ...}\"",
          "required": false,
          "defaultValue": "{ok: 'OK'}"
        },
        "error": {
          "type": "string",
          "description": "Error text to show in content area",
          "required": false
        },
        "message": {
          "type": "string",
          "description": "Message text to show in content area",
          "required": false
        },
        "errorButtons": {
          "type": "object",
          "description": "List of buttons to show if \"error\" property is assigned",
          "required": false,
          "defaultValue": "{ok: 'OK'}"
        },
        "messageButtons": {
          "type": "object",
          "description": "List of buttons to show if \"message\" property is assigned",
          "required": false,
          "defaultValue": "{ok: 'OK'}"
        },
        "escape": {
          "type": "any",
          "description": "Indicates whether to close dialog when \"Escape\" key is pressed",
          "required": false,
          "defaultValue": "false"
        },
        "transition": {
          "type": "number",
          "description": "Transition time in milliseconds",
          "required": false,
          "defaultValue": "250"
        },
        "onClose": {
          "type": "func",
          "description": "On form close event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.button": {
              "name": "event.button",
              "type": "string",
              "description": "Clicked button name"
            }
          },
          "required": true
        }
      }
    }
  }
}